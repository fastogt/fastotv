CMAKE_MINIMUM_REQUIRED(VERSION 3.3.0)

OPTION(ENABLE_LIRC "Enable LIRC for Linux IR handling" ON)

IF(OS_WINDOWS)
  SET(RESOURCE_OS     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/win.rc")
  SET(RESOURCE_OS_IN  "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/windows/winres.rc.in")
  SET(ICON_FILE_IN    "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/windows/icon.ico")
ELSEIF(OS_MACOSX)
  SET(RESOURCE_OS     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}.desktop")
  SET(RESOURCE_OS_IN  "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/desktop.in")
  SET(ICON_FILE_IN    "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/osx/icon.icns")
ELSEIF(OS_LINUX)
  SET(RESOURCE_OS     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}.desktop")
  SET(RESOURCE_OS_IN  "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/desktop.in")
  SET(ICON_FILE_IN    "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/linux/icon.png")
ELSEIF(OS_FREEBSD)
  SET(RESOURCE_OS     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}.desktop")
  SET(RESOURCE_OS_IN  "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/desktop.in")
  SET(ICON_FILE_IN    "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/linux/icon.png")
ELSEIF(OS_ANDROID)
  SET(RESOURCE_OS     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}.desktop")
  SET(RESOURCE_OS_IN  "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/desktop.in")
  SET(ICON_FILE_IN    "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/android/icon.png")
ENDIF(OS_WINDOWS)
GET_FILENAME_COMPONENT(ICON_FILE_IN_EXTENSION ${ICON_FILE_IN} EXT)
SET(ICON_FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}${ICON_FILE_IN_EXTENSION})
CONFIGURE_FILE("${ICON_FILE_IN}" "${ICON_FILE}" COPYONLY)

INCLUDE (CheckIncludeFiles)

#module
SET(PROJECT_CORE_LIBRARY ${PROJECT_NAME_LOWERCASE}_core)

SET(HEADERS_COMMANDS
  ${SOURCE_ROOT}/commands/commands.h
)

SET(SOURCES_COMMANDS
  ${SOURCE_ROOT}/commands/commands.cpp
)

SET(HEADERS_INNER
  ${SOURCE_ROOT}/inner/inner_server_command_seq_parser.h
  ${SOURCE_ROOT}/inner/inner_client.h
)

SET(SOURCES_INNER
  ${SOURCE_ROOT}/inner/inner_server_command_seq_parser.cpp
  ${SOURCE_ROOT}/inner/inner_client.cpp
)

SET(SOURCES_SDS
  ${SOURCE_ROOT}/third-party/sds/sds.c
)

SET(CLIENT_SERVER_SOURCES
  ${SOURCE_ROOT}/infos.h ${SOURCE_ROOT}/infos.cpp
  ${SOURCE_ROOT}/server_config.h
  ${SOURCE_ROOT}/url.h ${SOURCE_ROOT}/url.cpp
  ${SOURCE_ROOT}/types.h ${SOURCE_ROOT}/types.cpp
  ${SOURCE_ROOT}/common_types.h ${SOURCE_ROOT}/common_types.cpp
) # server and client common sources

IF(OS_WINDOWS)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES ws2_32)
ELSEIF(OS_MACOSX)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES)
ELSEIF(OS_LINUX)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES)
ELSEIF(OS_FREEBSD)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES)
ENDIF(OS_WINDOWS)

IF(USE_PTHREAD)
  SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} pthread)
ENDIF(USE_PTHREAD)

IF(OS_WINDOWS)
  FIND_PACKAGE(DirectX)
  IF(DirectX_FOUND)
    SET(DXVA2_FOUND ON)
    ADD_DEFINITIONS(-DHAVE_DXVA2)
    SET(HAVE_DXVA2_LIB 1)
    SET(CONFIG_DXVA2 1)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${DirectX_LIBRARIES})
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${DIRECTX_INCLUDE_DIRS})
  ENDIF(DirectX_FOUND)
  SET(PLATFORM_HDRS ${PLATFORM_HDRS})
  SET(PLATFORM_SRCS ${PLATFORM_SRCS})
  SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} secur32 vfw32 strmiids shlwapi)
ELSEIF(OS_MACOSX)
  FIND_LIBRARY(COCOA_LIBRARY Cocoa)
  FIND_LIBRARY(SECURITY_LIBRARY Security)
  FIND_LIBRARY(QTKIT_LIBRARY QTKit)
  FIND_LIBRARY(AVFOUNDATION_LIBRARY AvFoundation)
  FIND_LIBRARY(AUDIOTOOLBOX_LIBRARY AudioToolBox)
  FIND_LIBRARY(FOUNDATION_LIBRARY Foundation)
  FIND_LIBRARY(VIDEODECODE_LIBRARY VideoDecodeAcceleration)
  FIND_LIBRARY(QUARTZ_LIBRARY QuartzCore)
  FIND_LIBRARY(OPENGL_LIBRARY OpenGL)

  FIND_LIBRARY(COREMEDIA_LIBRARY CoreMedia)
  FIND_LIBRARY(COREVIDEO_LIBRARY CoreVideo)
  FIND_LIBRARY(CORESERVICES_LIBRARY CoreServices)
  IF(COREVIDEO_LIBRARY AND COREMEDIA_LIBRARY)
    SET(HAVE_UTGETOSTYPEFROMSTRING 1)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${CORESERVICES_LIBRARY})
  ENDIF(COREVIDEO_LIBRARY AND COREMEDIA_LIBRARY)

  FIND_LIBRARY(VIDEOTOOLBOX_LIBRARY VideoToolBox)
  IF (VIDEOTOOLBOX_LIBRARY)
    IF(VIDEODECODE_LIBRARY)
      ADD_DEFINITIONS(-DHAVE_VDA)
      SET(CONFIG_VDA 1)
    ENDIF(VIDEODECODE_LIBRARY)

    SET(VIDEOTOOLBOX_FOUND ON)
    SET(HAVE_VIDEOTOOLBOX 1)
    SET(CONFIG_VIDEOTOOLBOX 1)

    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${VIDEOTOOLBOX_LIBRARY})
  ENDIF(VIDEOTOOLBOX_LIBRARY)

  SET(PLATFORM_HDRS ${PLATFORM_HDRS})
  SET(PLATFORM_SRCS ${PLATFORM_SRCS})
  SET(PLATFORM_LIBRARIES
    ${PLATFORM_LIBRARIES}
    ${COCOA_LIBRARY}
    ${SECURITY_LIBRARY}
    ${QTKIT_LIBRARY}
    ${AVFOUNDATION_LIBRARY}
    ${AUDIOTOOLBOX_LIBRARY}
    ${COREVIDEO_LIBRARY}
    ${COREMEDIA_LIBRARY}
    ${FOUNDATION_LIBRARY}
    ${VIDEODECODE_LIBRARY}
    ${QUARTZ_LIBRARY}
    ${OPENGL_LIBRARY}
   )
ELSEIF(OS_LINUX)
  FIND_LIBRARY(VA_DRM_LIBRARY NAMES va-drm)
  IF(VA_DRM_LIBRARY)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${VA_DRM_LIBRARY})
  ENDIF(VA_DRM_LIBRARY)
  FIND_LIBRARY(VA_X11_LIBRARY NAMES va-x11)
  IF(VA_X11_LIBRARY)
    SET(HAVE_VAAPI_X11 1)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${VA_X11_LIBRARY})
  ENDIF(VA_X11_LIBRARY)

  FIND_PACKAGE(PkgConfig REQUIRED)

  FIND_PACKAGE(X11 REQUIRED)
  IF(X11_FOUND)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${X11_LIBRARIES})
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${X11_INCLUDE_DIR})
  ENDIF(X11_FOUND)
  FIND_PACKAGE(ALSA)
  IF(ALSA_FOUND)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${ALSA_LIBRARY})
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${ALSA_INCLUDE_DIR})
  ENDIF(ALSA_FOUND)
  FIND_PACKAGE(Xv)
  IF(XV_FOUND)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${XV_LIBRARIES})
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${XV_INCLUDE_DIRS})
  ENDIF(XV_FOUND)

  PKG_CHECK_MODULES(VDPAU vdpau)
  IF(VDPAU_FOUND)
    IF(VA_DRM_LIBRARY)
      SET(HAVE_VDPAU_DRM 1)
    ENDIF(VA_DRM_LIBRARY)
    IF(X11_FOUND)
      SET(HAVE_VDPAU_X11 1)
    ENDIF(X11_FOUND)
    ADD_DEFINITIONS(-DHAVE_VDPAU)
    SET(CONFIG_VDPAU 1)
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${VDPAU_INCLUDE_DIRS})
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${VDPAU_LIBRARIES})
  ENDIF(VDPAU_FOUND)

  PKG_CHECK_MODULES(VAAPI libva)
  IF(VAAPI_FOUND)
    IF(VA_DRM_LIBRARY)
      SET(HAVE_VAAPI_DRM 1)
    ENDIF(VA_DRM_LIBRARY)
    IF(X11_FOUND)
      SET(HAVE_VAAPI_X11 1)
    ENDIF(X11_FOUND)
    ADD_DEFINITIONS(-DHAVE_VAAPI)
    SET(HAVE_VAAPI 1)
    SET(CONFIG_VAAPI 1)
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${VAAPI_INCLUDE_DIRS})
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${VAAPI_LIBRARIES})
  ENDIF(VAAPI_FOUND)

  FIND_PACKAGE(CUDA QUIET)
  IF(CUDA_FOUND)
    ADD_DEFINITIONS(-DHAVE_CUDA)
    SET(HAVE_CUVID 1)
    SET(CONFIG_CUVID 1)
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${CUDA_INCLUDE_DIRS})
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${CUDA_LIBRARIES})
  ENDIF(CUDA_FOUND)
  SET(PLATFORM_HDRS ${PLATFORM_HDRS})
  SET(PLATFORM_SRCS ${PLATFORM_SRCS})
  SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} dl m)
ELSEIF(OS_FREEBSD)
  SET(PLATFORM_HDRS ${PLATFORM_HDRS})
  SET(PLATFORM_SRCS ${PLATFORM_SRCS})
  SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES})
ENDIF(OS_WINDOWS)

SET(HEADERS_CORE_EVENTS
  core/events/events_base.h
  core/events/key_events.h
  core/events/mouse_events.h
  core/events/window_events.h
  core/events/stream_events.h
  core/events/events.h
  core/events/network_events.h
  core/events/lirc_events.h
)

SET(HEADERS_CORE
  core/types.h
  core/utils.h
  core/clock.h
  core/packet_queue.h
  core/frame_queue.h
  core/decoder.h
  core/app_options.h
  core/audio_params.h
  core/stream.h
  core/ring_buffer.h
  core/audio_frame.h
  core/video_frame.h
  core/application/sdl2_application.h
  core/video_state.h
  core/video_state_handler.h

  ${HEADERS_CORE_EVENTS}
)

SET(SOURCES_CORE_EVENTS
  core/events/events_base.cpp
  core/events/key_events.cpp
  core/events/mouse_events.cpp
  core/events/window_events.cpp
  core/events/stream_events.cpp
  core/events/events.cpp
  core/events/network_events.cpp
  core/events/lirc_events.cpp
)

SET(SOURCES_CORE
  core/types.cpp
  core/utils.cpp
  core/clock.cpp
  core/packet_queue.cpp
  core/frame_queue.cpp
  core/decoder.cpp
  core/app_options.cpp
  core/audio_params.cpp
  core/stream.cpp
  core/ring_buffer.cpp
  core/audio_frame.cpp
  core/video_frame.cpp
  core/application/sdl2_application.cpp
  core/video_state.cpp
  core/video_state_handler.cpp

  ${SOURCES_CORE_EVENTS}
)

FIND_PACKAGE(SDL2 REQUIRED)
FIND_PACKAGE(FFmpeg REQUIRED)
FIND_PACKAGE(PNG REQUIRED)
FIND_PACKAGE(Common REQUIRED)

IF(FFMPEG_LIBAVFILTER)
  SET(CONFIG_AVFILTER 1)
ENDIF(FFMPEG_LIBAVFILTER)
IF (NOT CONFIG_AVFILTER)
  MESSAGE(FATAL_ERROR "REQUEIRED AVFILER SUPPORT!!!")
ENDIF(NOT CONFIG_AVFILTER)
IF(FFMPEG_LIBAVDEVICE)
  SET(CONFIG_AVDEVICE 1)
ENDIF(FFMPEG_LIBAVDEVICE)
IF(FFMPEG_LIBAVUTIL)
  SET(CONFIG_AVUTIL 1)
ENDIF(FFMPEG_LIBAVUTIL)
IF(FFMPEG_LIBAVCODEC)
  SET(CONFIG_AVCODEC 1)
ENDIF(FFMPEG_LIBAVCODEC)
IF(FFMPEG_LIBAVFORMAT)
  SET(CONFIG_AVFORMAT 1)
ENDIF(FFMPEG_LIBAVFORMAT)
IF(FFMPEG_LIBSWSCALE)
  SET(CONFIG_SWSCALE 1)
ENDIF(FFMPEG_LIBSWSCALE)
IF(FFMPEG_LIBSWRESAMPLE)
  SET(CONFIG_SWRESAMPLE 1)
ENDIF(FFMPEG_LIBSWRESAMPLE)

CHECK_INCLUDE_FILES("sys/resource.h;sys/time.h" HAVE_SYS_RESOURCE_H)
CONFIGURE_FILE(ffmpeg_config.h.in ${CMAKE_CURRENT_BINARY_DIR}/ffmpeg_config.h @ONLY IMMEDIATE)

# core
SET(BUILD_CLIENT_CORE_SOURCES
  ${HEADERS_CORE} ${SOURCES_CORE}
  ${HEADERS_COMMANDS} ${SOURCES_COMMANDS}
)

SET(PRIVATE_INCLUDE_DIRECTORIES_CORE
 ${CMAKE_CURRENT_BINARY_DIR}  # for ffmpeg_config.h
 ${SOURCE_ROOT}
 ${FFMPEG_INCLUDE_DIR}
 ${COMMON_INCLUDE_DIR}
 ${SDL2_INCLUDE_DIRS}
 ${PNG_INCLUDE_DIRS}
 ${DEPENDENS_INCLUDE_DIRS}
)

IF(VDPAU_FOUND)
  SET(BUILD_CLIENT_CORE_SOURCES ${BUILD_CLIENT_CORE_SOURCES} core/hwaccels/ffmpeg_vdpau.cpp)
ENDIF(VDPAU_FOUND)
IF(VAAPI_FOUND)
  SET(BUILD_CLIENT_CORE_SOURCES ${BUILD_CLIENT_CORE_SOURCES} core/hwaccels/ffmpeg_vaapi.cpp)
ENDIF(VAAPI_FOUND)
IF(DXVA2_FOUND)
  SET(BUILD_CLIENT_CORE_SOURCES ${BUILD_CLIENT_CORE_SOURCES} core/hwaccels/ffmpeg_dxva2.cpp)
ENDIF(DXVA2_FOUND)
IF(CUDA_FOUND)
  SET(BUILD_CLIENT_CORE_SOURCES ${BUILD_CLIENT_CORE_SOURCES} core/hwaccels/ffmpeg_cuvid.cpp)
ENDIF(CUDA_FOUND)
IF(VIDEOTOOLBOX_FOUND)
  SET(BUILD_CLIENT_CORE_SOURCES ${BUILD_CLIENT_CORE_SOURCES} core/hwaccels/ffmpeg_videotoolbox.cpp)
ENDIF(VIDEOTOOLBOX_FOUND)

ADD_LIBRARY(${PROJECT_CORE_LIBRARY} STATIC ${BUILD_CLIENT_CORE_SOURCES}
 core/ffmpeg_internal.h core/ffmpeg_internal.cpp
)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_CORE_LIBRARY} PRIVATE ${PRIVATE_INCLUDE_DIRECTORIES_CORE})
TARGET_LINK_LIBRARIES(${PROJECT_CORE_LIBRARY}
  ${FFMPEG_LIBRARIES}

  ${BZIP2_LIBRARIES}
  ${ZLIB_LIBRARY}
  ${SDL2_LIBRARIES}
  ${PNG_LIBRARIES}
  ${DEPENDENS_LIBRARIES}
  ${PLATFORM_LIBRARIES}
)

SET_DESKTOP_TARGET()

#project
SET(HEADERS_INNER_CLIENT
  inner/inner_tcp_server.h
  inner/inner_tcp_handler.h
  commands.h
)

SET(SOURCES_INNER_CLIENT
  inner/inner_tcp_server.cpp
  inner/inner_tcp_handler.cpp
  commands.cpp
)

# User specific
SET(USER_LOGIN anon@fastogt.com CACHE STRING "User login")
SET(USER_PASSWORD anon CACHE STRING "User password for ${USER_LOGIN}")
SET(USER_GROUP ${USER_LOGIN} CACHE STRING "User group")
# Config
SET(CONFIG_HWACCEL_METHOD "none" CACHE STRING "Hwaccel method")
SET(CONFIG_POWER_OFF_ON_EXIT OFF CACHE BOOL "Power off device on exit")
SET(CONFIG_VF_SCALE "" CACHE BOOL "Scale options")

SET(PID_FILE_NAME ${PROJECT_NAME_LOWERCASE}.pid)
SET(CONFIG_FILE_NAME ${PROJECT_NAME_LOWERCASE}.ini)
IF(OS_WINDOWS)
  SET(RUNTIME_DIR "${TARGET_INSTALL_DESTINATION}/${PROJECT_NAME_LOWERCASE}")
  SET(EXECUTABLE_FOLDER_PATH ${TARGET_INSTALL_DESTINATION})
ELSEIF(OS_MACOSX)
  SET(RUNTIME_DIR "/tmp/${PROJECT_NAME_LOWERCASE}")
  SET(EXECUTABLE_FOLDER_PATH ${TARGET_INSTALL_DESTINATION})
ELSEIF(OS_LINUX OR OS_FREEBSD)
  #SET(RUNTIME_DIR "/var/run/${PROJECT_NAME_LOWERCASE}")
  SET(RUNTIME_DIR "/tmp/${PROJECT_NAME_LOWERCASE}")
  SET(EXECUTABLE_FOLDER_PATH /usr/bin)
ENDIF(OS_WINDOWS)

SET(EXECUTABLE_PATH ${EXECUTABLE_FOLDER_PATH}/${PROJECT_NAME_LOWERCASE} CACHE INTERNAL
  "Executable path: ${EXECUTABLE_PATH}") # for services

SET(APPLICATION_DIR "~/.${PROJECT_NAME_LOWERCASE}")
SET(LOG_FILE_NAME "${PROJECT_NAME_LOWERCASE}.log")

SET(CONFIG_FILE_GENERATED_PATH "${CMAKE_CURRENT_BINARY_DIR}/${CONFIG_FILE_NAME}")
CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/config.ini.in"
  ${CONFIG_FILE_GENERATED_PATH} @ONLY IMMEDIATE)

ADD_DEFINITIONS(
  -DUSER_LOGIN="${USER_LOGIN}"
  -DUSER_PASSWORD="${USER_PASSWORD}"

  -DPID_FILE_NAME="${PID_FILE_NAME}"
  -DRUNTIME_DIR="${RUNTIME_DIR}"

  -DLOG_FILE_NAME="${LOG_FILE_NAME}"
  -DAPPLICATION_DIR="${APPLICATION_DIR}"

  -DCONFIG_FILE_NAME="${CONFIG_FILE_NAME}"
)

IF(ENABLE_LIRC)
  FIND_PACKAGE(LircClient REQUIRED)
  IF(LIRC_CLIENT_FOUND)
    ADD_DEFINITIONS(-DHAVE_LIRC)
    SET(DEPENDENS_CLIENT_SOURCES ${DEPENDENS_CLIENT_SOURCES} inputs/lirc_input_client.h)
    SET(DEPENDENS_CLIENT_HEADERS ${DEPENDENS_CLIENT_HEADERS} inputs/lirc_input_client.cpp)
    SET(DEPENDENS_CLIENT_INCLUDE_DIRS ${DEPENDENS_CLIENT_INCLUDE_DIRS} ${LIRC_CLIENT_INCLUDE_DIR})
    SET(DEPENDENS_CLIENT_LIBRARIES ${DEPENDENS_CLIENT_LIBRARIES} ${LIRC_CLIENT_LIBRARIES})
  ENDIF(LIRC_CLIENT_FOUND)
ENDIF(ENABLE_LIRC)

SET(BUILD_CLIENT_SOURCES
  player.h player.cpp
  config.h config.cpp
  cmdutils.h cmdutils.cpp
  sdl_utils.h sdl_utils.cpp
  ioservice.h ioservice.cpp
  ${HEADERS_INNER} ${SOURCES_INNER} ${CLIENT_SERVER_SOURCES}
  ${HEADERS_INNER_CLIENT} ${SOURCES_INNER_CLIENT}
  ${DEPENDENS_CLIENT_SOURCES} ${DEPENDENS_CLIENT_HEADERS}
)
SET(EXE_SOURCES main.cpp ${BUILD_CLIENT_SOURCES} ${SOURCES_SDS})
SET(OTHER_SOURCES ${CMAKE_CURRENT_BINARY_DIR}/ffmpeg_config.h ${ICON_FILE} ${RESOURCE_OS})

IF(NOT TARGET inih)
  ADD_SUBDIRECTORY(${SOURCE_ROOT}/third-party/ini inih)
ENDIF()

IF(NOT TARGET json-c)
  ADD_SUBDIRECTORY(${SOURCE_ROOT}/third-party/json-c json-c)
ENDIF()

SET(PRIVATE_INCLUDE_DIRECTORIES_CLIENT
  ${SOURCE_ROOT}
  ${CMAKE_CURRENT_BINARY_DIR}
  ${SOURCE_ROOT}/third-party/sds
  ${SOURCE_ROOT}/third-party/ini
  ${DEPENDENS_CLIENT_INCLUDE_DIRS}
  ${COMMON_INCLUDE_DIR}
)

IF(MINGW OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANGCXX)
  IF(OS_ANDROID)
    ADD_LIBRARY(${PROJECT_NAME} SHARED ${EXE_SOURCES} ${OTHER_SOURCES})
    TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE ${PRIVATE_INCLUDE_DIRECTORIES_CLIENT})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME}
      ${PROJECT_CORE_LIBRARY}
      ${DEPENDENS_CLIENT_LIBRARIES} ${COMMON_LIBRARIES} json-c inih
    )
  ELSE()
    ADD_EXECUTABLE(${PROJECT_NAME} ${DESKTOP_TARGET} ${EXE_SOURCES} ${OTHER_SOURCES})
    TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE ${PRIVATE_INCLUDE_DIRECTORIES_CLIENT})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME}
      ${PROJECT_CORE_LIBRARY}
      ${DEPENDENS_CLIENT_LIBRARIES} ${COMMON_LIBRARIES} json-c inih
    )
  ENDIF(OS_ANDROID)
ELSE()
  MESSAGE(FATAL_ERROR "NOT SUPPORTED COMPILER!!!")
ENDIF(MINGW OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANGCXX)

IF(OS_WINDOWS)
  SET_SOURCE_FILES_PROPERTIES(${RESOURCE_OS} PROPERTIES LANGUAGE RC)
ELSEIF(OS_MACOSX)
  SET_SOURCE_FILES_PROPERTIES(${RESOURCE_OS} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
  SET_SOURCE_FILES_PROPERTIES(${ICON_FILE} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
ENDIF(OS_WINDOWS)

GET_FILENAME_COMPONENT(ICON_FILE_NAME ${ICON_FILE} NAME)
IF(OS_MACOSX)
  SET(MACOSX_BUNDLE_BUNDLE_NAME ${BUNDLE_BASE_NAME})
  SET(MACOSX_BUNDLE_GUI_IDENTIFIER ${PROJECT_NAME})
  SET(MACOSX_BUNDLE_INFO_STRING "${PROJECT_VERSION},${PROJECT_COPYRIGHT}" )
  SET(MACOSX_BUNDLE_SHORT_VERSION_STRING "${SHORT_VERSION}" )
  SET(MACOSX_BUNDLE_LONG_VERSION_STRING ${PROJECT_VERSION})
  SET(MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION})
  SET(MACOSX_BUNDLE_COPYRIGHT ${PROJECT_COPYRIGHT})
  SET(MACOSX_BUNDLE_ICON_FILE ${ICON_FILE_NAME})
  SET(MACOSX_BUNDLE_PRINCIPAL_CLASS "NSApplication")
  #SET(MACOSX_MAIN_NIB_FILE "MainMenu")
ENDIF(OS_MACOSX)

#prepare executable
IF(PROJECT_BUILD_TYPE_VERSION STREQUAL "release")
  STRIP_TARGET(${PROJECT_NAME})
ENDIF(PROJECT_BUILD_TYPE_VERSION STREQUAL "release")

# Start to install
VersionConf(${PROJECT_NAME} ${RESOURCE_OS_IN} ${RESOURCE_OS} ${ICON_FILE_NAME})
INSTALL(TARGETS ${PROJECT_NAME} DESTINATION ${TARGET_INSTALL_DESTINATION} COMPONENT APPLICATIONS)
INSTALL(FILES ${CMAKE_SOURCE_DIR}/LICENSE DESTINATION . COMPONENT LICENSE RENAME LICENSE)
INSTALL(FILES ${CMAKE_SOURCE_DIR}/COPYRIGHT DESTINATION . COMPONENT LICENSE RENAME COPYRIGHT)
INSTALL(FILES ${PROJECT_CHANGELOG_FILE} DESTINATION . COMPONENT LICENSE RENAME CHANGELOG)

#share install
IF(ENABLE_LIRC)
  SET(LIRCRC_CONFIG_NAME "lircrc.conf")
  SET(LIRCRC_CONFIG_GENERATED_PATH "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${LIRCRC_CONFIG_NAME}")
  SET(LIRCRC_CONFIG_PATH_RELATIVE ${SHARE_INSTALL_DESTINATION}/${LIRCRC_CONFIG_NAME})
  ADD_DEFINITIONS(-DLIRCRC_CONFIG_PATH_RELATIVE="${LIRCRC_CONFIG_PATH_RELATIVE}")
  CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/hardware/lirc/${LIRCRC_CONFIG_NAME}.in"
    ${LIRCRC_CONFIG_GENERATED_PATH} @ONLY IMMEDIATE)
  INSTALL(FILES ${LIRCRC_CONFIG_GENERATED_PATH} DESTINATION
    ${SHARE_INSTALL_DESTINATION} COMPONENT RESOURCES)
ENDIF(ENABLE_LIRC)

#config file
SET(CONFIG_FILE_PATH_RELATIVE ${SHARE_INSTALL_DESTINATION}/${CONFIG_FILE_NAME})
ADD_DEFINITIONS(-DCONFIG_FILE_PATH_RELATIVE="${CONFIG_FILE_PATH_RELATIVE}")
INSTALL(FILES ${CONFIG_FILE_GENERATED_PATH} DESTINATION ${SHARE_INSTALL_DESTINATION} COMPONENT RUNTIME)
INSTALL(DIRECTORY ${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/resources DESTINATION
  ${SHARE_INSTALL_DESTINATION} COMPONENT RESOURCES)
INSTALL(DIRECTORY ${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/fonts DESTINATION
  ${SHARE_INSTALL_DESTINATION} COMPONENT RESOURCES)

IF(OS_WINDOWS)
  #find runtime zlib
  SET(SHARED_ZLIB_NAMES zlib1.dll z.dll zlib.dll zdll.dll zlibd.dll zlibd1.dll)
  FIND_RUNTIME_LIBRARY(SHARED_ZLIB_LIBRARY SHARED_ZLIB_NAMES)
  INSTALL(FILES ${SHARED_ZLIB_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime bz
  SET(SHARED_BZ2_NAMES libbz2-1.dll)
  FIND_RUNTIME_LIBRARY(SHARED_BZ2_LIBRARY SHARED_BZ2_NAMES)
  INSTALL(FILES ${SHARED_BZ2_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime png
  SET(SHARED_PNG_NAMES libpng16-16.dll)
  FIND_RUNTIME_LIBRARY(SHARED_PNG_LIBRARY SHARED_PNG_NAMES)
  INSTALL(FILES ${SHARED_PNG_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime harfbuzz
  SET(SHARED_HARFBUZZ_NAMES libharfbuzz-0.dll)
  FIND_RUNTIME_LIBRARY(SHARED_HARFBUZZ_LIBRARY SHARED_HARFBUZZ_NAMES)
  INSTALL(FILES ${SHARED_HARFBUZZ_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime glib
  SET(SHARED_GLIB_NAMES libglib-2.0-0.dll)
  FIND_RUNTIME_LIBRARY(SHARED_GLIB_LIBRARY SHARED_GLIB_NAMES)
  INSTALL(FILES ${SHARED_GLIB_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime intl
  SET(SHARED_INTL_NAMES libintl-8.dll)
  FIND_RUNTIME_LIBRARY(SHARED_INTL_LIBRARY SHARED_INTL_NAMES)
  INSTALL(FILES ${SHARED_INTL_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime pcre
  SET(SHARED_PCRE_NAMES libpcre-1.dll)
  FIND_RUNTIME_LIBRARY(SHARED_PCRE_LIBRARY SHARED_PCRE_NAMES)
  INSTALL(FILES ${SHARED_PCRE_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime iconv
  SET(SHARED_ICONV_NAMES libiconv-2.dll)
  FIND_RUNTIME_LIBRARY(SHARED_ICONV_LIBRARY SHARED_ICONV_NAMES)
  INSTALL(FILES ${SHARED_ICONV_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime graphite2
  SET(SHARED_GRAPHITE2_NAMES libgraphite2.dll)
  FIND_RUNTIME_LIBRARY(SHARED_GRAPHITE2_LIBRARY SHARED_GRAPHITE2_NAMES)
  INSTALL(FILES ${SHARED_GRAPHITE2_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime freetype
  SET(SHARED_FREETYPE_NAMES libfreetype-6.dll)
  FIND_RUNTIME_LIBRARY(SHARED_FREETYPE_LIBRARY SHARED_FREETYPE_NAMES)
  INSTALL(FILES ${SHARED_FREETYPE_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)
  
  #find runtime sdl2
  SET(SHARED_SDL2_NAMES SDL2.dll)
  FIND_RUNTIME_LIBRARY(SHARED_SDL2_LIBRARY SHARED_SDL2_NAMES)
  INSTALL(FILES ${SHARED_SDL2_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime sdl2 ttf
  SET(SHARED_SDL2_TTF_NAMES SDL2_ttf.dll)
  FIND_RUNTIME_LIBRARY(SHARED_SDL2_TTF_LIBRARY SHARED_SDL2_TTF_NAMES)
  INSTALL(FILES ${SHARED_SDL2_TTF_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)
ELSEIF(OS_MACOSX)
ELSEIF(OS_LINUX OR OS_FREEBSD)
  GET_FILENAME_COMPONENT(PNG_LIBRARY_WITHOUT_SYMLINK ${PNG_LIBRARY} REALPATH)
  GET_FILENAME_COMPONENT(PNG_LIBRARY_NAME ${PNG_LIBRARY_WITHOUT_SYMLINK} NAME)
  STRING(REGEX REPLACE "[^so]+$" ".16" PNG_LNNAME ${PNG_LIBRARY_NAME})
  #libpng16.so.16
  INSTALL(FILES ${PNG_LIBRARY_WITHOUT_SYMLINK} DESTINATION ${LIB_INSTALL_DESTINATION} RENAME ${PNG_LNNAME} COMPONENT RUNTIME)

  GET_FILENAME_COMPONENT(SDL2_LIBRARY_WITHOUT_SYMLINK ${SDL2_LIBRARY} REALPATH)
  GET_FILENAME_COMPONENT(SDL2_LIBRARY_NAME ${SDL2_LIBRARY_WITHOUT_SYMLINK} NAME)
  STRING(REGEX REPLACE "[^so]+$" ".0" SDL2_LNNAME ${SDL2_LIBRARY_NAME})
  #libSDL2-2.0.so.0
  INSTALL(FILES ${SDL2_LIBRARY_WITHOUT_SYMLINK} DESTINATION ${LIB_INSTALL_DESTINATION} RENAME ${SDL2_LNNAME} COMPONENT RUNTIME)

  GET_FILENAME_COMPONENT(SDL2_TTF_LIBRARY_WITHOUT_SYMLINK ${SDL2_TTF_LIBRARY} REALPATH)
  GET_FILENAME_COMPONENT(SDL2_TTF_LIBRARY_NAME ${SDL2_TTF_LIBRARY_WITHOUT_SYMLINK} NAME)
  STRING(REGEX REPLACE "[^so]+$" ".0" SDL2_TTF_LNNAME ${SDL2_TTF_LIBRARY_NAME})
  #libSDL2_ttf-2.0.so.0
  INSTALL(FILES ${SDL2_TTF_LIBRARY_WITHOUT_SYMLINK} DESTINATION ${LIB_INSTALL_DESTINATION} RENAME ${SDL2_TTF_LNNAME} COMPONENT RUNTIME)

  # exe script
  SET(START_SCRIPT_GENERATED_PATH "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}")
  CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/start.sh.in" ${START_SCRIPT_GENERATED_PATH} @ONLY IMMEDIATE)
  INSTALL(PROGRAMS ${START_SCRIPT_GENERATED_PATH} DESTINATION ${TARGET_INSTALL_DESTINATION})

  #share resources

  #xinitrc script
  SET(XINITRC_SCRIPT_GENERATED_PATH "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/xinitrc")
  CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/linux/xinitrc.in"
    ${XINITRC_SCRIPT_GENERATED_PATH} @ONLY IMMEDIATE)
  INSTALL(FILES ${XINITRC_SCRIPT_GENERATED_PATH} DESTINATION ${SHARE_INSTALL_DESTINATION} COMPONENT RESOURCES)

  # auto_start script
  SET(AURO_START_SCRIPT_GENERATED_PATH "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/autostart_${PROJECT_NAME_LOWERCASE}")
  CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/autostart.sh.in"
    ${AURO_START_SCRIPT_GENERATED_PATH} @ONLY IMMEDIATE)
  INSTALL(PROGRAMS ${AURO_START_SCRIPT_GENERATED_PATH} DESTINATION ${SHARE_INSTALL_DESTINATION})

  INSTALL(FILES ${RESOURCE_OS} DESTINATION ${SHARE_INSTALL_DESTINATION}/applications COMPONENT RESOURCES)
  INSTALL(FILES ${ICON_FILE} DESTINATION ${SHARE_INSTALL_DESTINATION}/icons COMPONENT RESOURCES)
ENDIF(OS_WINDOWS)

INSTALL_RUNTIME_LIBRARIES()

IF(DEVELOPER_CHECK_STYLE)
  SET(CHECK_SOURCES_CLIENT ${BUILD_CLIENT_CORE_SOURCES} ${BUILD_CLIENT_SOURCES})
  REGISTER_CHECK_STYLE_TARGET(check_style_client "${CHECK_SOURCES_CLIENT}")
  REGISTER_CHECK_INCLUDES_TARGET(${PROJECT_NAME})
ENDIF(DEVELOPER_CHECK_STYLE)

IF(DEVELOPER_ENABLE_TESTS)
  SET(PROJECT_VIDEO_PERFORMANCE_TEST video_performance_test)
  ADD_EXECUTABLE(${PROJECT_VIDEO_PERFORMANCE_TEST} ${CMAKE_SOURCE_DIR}/tests/video_performance_test.cpp)
  TARGET_INCLUDE_DIRECTORIES(${PROJECT_VIDEO_PERFORMANCE_TEST} PRIVATE ${SOURCE_ROOT} ${CMAKE_CURRENT_BINARY_DIR} ${COMMON_INCLUDE_DIR})
  TARGET_LINK_LIBRARIES(${PROJECT_VIDEO_PERFORMANCE_TEST} ${PROJECT_CORE_LIBRARY} ${COMMON_LIBRARIES})
ENDIF(DEVELOPER_ENABLE_TESTS)
