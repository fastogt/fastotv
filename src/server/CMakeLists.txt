CMAKE_MINIMUM_REQUIRED(VERSION 3.3.0)

SET(PROJECT_SERVER_NAME ${PROJECT_NAME_LOWERCASE}_server)

IF(OS_WINDOWS)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES ws2_32)
ELSEIF(OS_MACOSX)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES)
ELSEIF(OS_LINUX)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES)
ELSEIF(OS_FREEBSD)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES)
ENDIF(OS_WINDOWS)

IF(USE_PTHREAD)
  SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} pthread)
ENDIF(USE_PTHREAD)

SET(HEADERS_REDIS
  ${SOURCE_ROOT}/server/redis/redis_connect.h
  ${SOURCE_ROOT}/server/redis/redis_storage.h
  ${SOURCE_ROOT}/server/redis/redis_config.h

  ${SOURCE_ROOT}/server/redis/redis_sub_config.h
  ${SOURCE_ROOT}/server/redis/redis_pub_sub.h
  ${SOURCE_ROOT}/server/redis/redis_pub_sub_handler.h
)

SET(SOURCES_REDIS
  ${SOURCE_ROOT}/server/redis/redis_connect.cpp
  ${SOURCE_ROOT}/server/redis/redis_storage.cpp
  ${SOURCE_ROOT}/server/redis/redis_config.cpp

  ${SOURCE_ROOT}/server/redis/redis_pub_sub.cpp
  ${SOURCE_ROOT}/server/redis/redis_pub_sub_handler.cpp
  ${SOURCE_ROOT}/server/redis/redis_sub_config.cpp
)

SET(HEADERS_INNER_SERVER
  ${SOURCE_ROOT}/server/commands.h
  ${SOURCE_ROOT}/server/inner/inner_tcp_server.h
  ${SOURCE_ROOT}/server/inner/inner_tcp_client.h
  ${SOURCE_ROOT}/server/inner/inner_tcp_handler.h
  ${SOURCE_ROOT}/server/inner/inner_external_notifier.h
)

SET(SOURCES_INNER_SERVER
  ${SOURCE_ROOT}/server/inner/inner_tcp_server.cpp
  ${SOURCE_ROOT}/server/inner/inner_tcp_client.cpp
  ${SOURCE_ROOT}/server/inner/inner_tcp_handler.cpp
  ${SOURCE_ROOT}/server/inner/inner_external_notifier.cpp
  ${SOURCE_ROOT}/server/commands.cpp
)

SET(BUILD_SERVER_SOURCES
  ${SOURCE_ROOT}/server/server_host.cpp
  ${SOURCE_ROOT}/server/server_host.h
  ${SOURCE_ROOT}/server/user_info.h
  ${SOURCE_ROOT}/server/user_info.cpp
  ${SOURCE_ROOT}/server/user_state_info.h
  ${SOURCE_ROOT}/server/user_state_info.cpp
  ${SOURCE_ROOT}/server/responce_info.h
  ${SOURCE_ROOT}/server/responce_info.cpp
  ${SOURCE_ROOT}/server/config.h
  ${SOURCE_ROOT}/server/config.cpp
  ${HEADERS_REDIS} ${SOURCES_REDIS}

  ${HEADERS_INNER_SERVER} ${SOURCES_INNER_SERVER}
  ${HEADERS_PARSE_COMMANDS} ${SOURCES_PARSE_COMMANDS}
)
SET(SERVER_CONFIG_FILE_NAME "${PROJECT_SERVER_NAME}.conf")
SET(SERVER_CONFIG_FILE_PATH "/etc/${SERVER_CONFIG_FILE_NAME}")
CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/server/server_config.in"
  "${CMAKE_CURRENT_BINARY_DIR}/${SERVER_CONFIG_FILE_NAME}" @ONLY IMMEDIATE)
ADD_DEFINITIONS(-DSERVER_CONFIG_FILE_PATH="${SERVER_CONFIG_FILE_PATH}")
ADD_DEFINITIONS(-DPROJECT_NAME_SERVER_TITLE="${PROJECT_SERVER_NAME}")
ADD_DEFINITIONS(-DPROJECT_NAME_SERVER="${PROJECT_NAME_LOWERCASE}")

FIND_PACKAGE(Common REQUIRED)
FIND_PACKAGE(Snappy REQUIRED)
FIND_PACKAGE(JSON-C REQUIRED)

ADD_SUBDIRECTORY(${SOURCE_ROOT}/third-party/redis redis)

IF(NOT TARGET inih)
  ADD_SUBDIRECTORY(${SOURCE_ROOT}/third-party/ini inih)
ENDIF(NOT TARGET inih)

SET(PRIVATE_INCLUDE_DIRECTORIES_SERVER
  ${SOURCE_ROOT}
  ${SOURCE_ROOT}/third-party/ini
  ${SOURCE_ROOT}/third-party/sds
  ${SOURCE_ROOT}/third-party/redis/deps
  ${COMMON_INCLUDE_DIR}
  ${SNAPPY_INCLUDE_DIR}
  ${JSONC_INCLUDE_DIRS}
)

SET(PRIVATE_LIBRARIES_SERVER
  ${PROJECT_CLIENT_SERVER_LIBRARY}
  ${JSONC_LIBRARIES}
  inih
  hiredis
  ${COMMON_LIBRARIES}
  ${SNAPPY_LIBRARIES}
  ${PLATFORM_LIBRARIES}
)

ADD_EXECUTABLE(${PROJECT_SERVER_NAME}
  ${SOURCE_ROOT}/server/main.cpp
  ${BUILD_SERVER_SOURCES}
)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_SERVER_NAME} PRIVATE ${PRIVATE_INCLUDE_DIRECTORIES_SERVER})
TARGET_LINK_LIBRARIES(${PROJECT_SERVER_NAME} ${PRIVATE_LIBRARIES_SERVER})

#prepare executable
IF(PROJECT_BUILD_TYPE_VERSION STREQUAL "release")
  STRIP_TARGET(${PROJECT_SERVER_NAME})
ENDIF(PROJECT_BUILD_TYPE_VERSION STREQUAL "release")

# Start to install
INSTALL(TARGETS ${PROJECT_SERVER_NAME} DESTINATION ${TARGET_INSTALL_DESTINATION} COMPONENT APPLICATIONS)
IF(NOT EXISTS ${SERVER_CONFIG_FILE_PATH})
  INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/${SERVER_CONFIG_FILE_NAME} DESTINATION /etc/)
ENDIF(NOT EXISTS ${SERVER_CONFIG_FILE_PATH})

IF (DEVELOPER_CHECK_STYLE)
  SET(CHECK_SOURCES_SERVER
    ${SOURCE_ROOT}/server/main.cpp ${BUILD_SERVER_SOURCES}
  )
  REGISTER_CHECK_STYLE_TARGET(check_style_server "${CHECK_SOURCES_SERVER}")
  REGISTER_CHECK_INCLUDES_TARGET(${PROJECT_SERVER_NAME})
ENDIF(DEVELOPER_CHECK_STYLE)

IF(DEVELOPER_ENABLE_TESTS)
  IF(DEVELOPER_ENABLE_UNIT_TESTS)
    SET(PRIVATE_INCLUDE_DIRECTORIES_SERVER_TEST
      ${gtest_SOURCE_DIR}/include ${gtest_SOURCE_DIR} ${SOURCE_ROOT}
      ${COMMON_INCLUDE_DIR}
      ${JSONC_INCLUDE_DIRS}
    )

    SET(PROJECT_UNIT_TEST_CLIENT unit_tests_server)
    ADD_EXECUTABLE(${PROJECT_UNIT_TEST_CLIENT}
      ${CMAKE_SOURCE_DIR}/tests/unit_tests/server/test_parse_commands.cpp commands.cpp
      ${CMAKE_SOURCE_DIR}/tests/unit_tests/server/test_serializer.cpp

      ${SOURCE_ROOT}/server/user_info.cpp
      ${SOURCE_ROOT}/server/user_state_info.cpp
      ${SOURCE_ROOT}/server/responce_info.cpp
    )
    TARGET_INCLUDE_DIRECTORIES(${PROJECT_UNIT_TEST_CLIENT} PRIVATE ${PRIVATE_INCLUDE_DIRECTORIES_SERVER_TEST} ${JSONC_INCLUDE_DIRS})
    TARGET_LINK_LIBRARIES(${PROJECT_UNIT_TEST_CLIENT} gtest gtest_main
      ${PROJECT_CLIENT_SERVER_LIBRARY} ${COMMON_LIBRARIES} ${JSONC_LIBRARIES}
    )
    ADD_TEST_TARGET(${PROJECT_UNIT_TEST_CLIENT})
    SET_PROPERTY(TARGET ${PROJECT_UNIT_TEST_CLIENT} PROPERTY FOLDER "Unit tests")
  ENDIF(DEVELOPER_ENABLE_UNIT_TESTS)
ENDIF(DEVELOPER_ENABLE_TESTS)
